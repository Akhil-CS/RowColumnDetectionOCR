import cv2
import numpy as np
from matplotlib import pyplot as plt


# Read the image
image = cv2.imread('image1.jpg')

# Convert RGB To GrayScale
img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Plot the histogram of GrayScale Values
plt.hist(img.ravel(),256,[0,254])
plt.show()

# Thresholding the image based on histogram
(thresh, img_bin) = cv2.threshold(img, 250, 255,cv2.THRESH_BINARY)

# Invert the image
img_bin = 255-img_bin 
cv2.imshow("Image_bin.jpg",img_bin)
cv2.waitKey(0)

 
# A verticle kernel of (1 X kernel_length), which will detect all the verticle lines from the image.
verticle_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 5))
# A horizontal kernel of (kernel_length X 1), which will help to detect all the horizontal line from the image.
hori_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 1))
# A kernel of (3 X 3) ones.
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))


# Morphological operation to detect vertical lines from an image
img_temp1 = cv2.erode(img_bin, verticle_kernel, iterations=3)
verticle_lines_img = cv2.dilate(img_temp1, verticle_kernel, iterations=3)
cv2.imshow("verticle_lines.jpg",verticle_lines_img)
cv2.waitKey(0)
# Morphological operation to detect horizontal lines from an image
img_temp2 = cv2.erode(img_bin, hori_kernel, iterations=3)
horizontal_lines_img = cv2.dilate(img_temp2, hori_kernel, iterations=3)
cv2.imshow("horizontal_lines.jpg",horizontal_lines_img)
cv2.waitKey(0)


# Weighting parameters, this will decide the quantity of an image to be added to make a new image.
alpha = 0.5
beta = 1.0 - alpha
# This function helps to add two image with specific weight parameter to get a third image as summation of two image.
img_final_bin = cv2.addWeighted(verticle_lines_img, alpha, horizontal_lines_img, beta, 0.0)
img_final_bin = cv2.erode(~img_final_bin, kernel, iterations=2)
(thresh, img_final_bin) = cv2.threshold(img_final_bin, 128,255, cv2.THRESH_BINARY)
cv2.imshow("img_final_bin.jpg",img_final_bin)
cv2.waitKey(0)
# Find contours for image, which will detect all the boxes
im2, contours, hierarchy = cv2.findContours(img_final_bin, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
#print(hierarchy)

x_list = []
y_list = []
w_list = []
h_list = []
min_row = 10000000
min_column = 10000000

idx = 0
count = 0

for c in contours:

    # Returns the location and width,height for every contour
    x, y, w, h = cv2.boundingRect(c)
    
    idx += 1
    if hierarchy[0][idx-1][2] == -1 :
    	count += 1
    	x_list.append(x)
    	y_list.append(y)
    	w_list.append(w)
    	h_list.append(h)
    	if w < min_column :
    		min_column = w
    	if h < min_row :
    		min_row = h

rows = []
columns = []
# Returns the rows and columns from the image
rows = sorted(np.unique(np.array(x_list)))
columns = sorted(np.unique(np.array(y_list)))

print('The total number of cells are {}'.format(count))
print('Number of rows are {}'.format(len(rows)))
print('Number of columns are {}'.format(len(columns)))

# Detects Column Span
col_num = 0
for i in w_list:
	col_num += 1
	if i/min_column > 1.8:
		print('Column Span detected at row {} and column {} of length {}'.format(columns.index(y_list[col_num-1]),rows.index(x_list[col_num-1]), i/min_column))
		
# Detects Row Span
row_num = 0 
for j in h_list:
	row_num += 1
	if j/min_row > 1.8:
		print('Row Span detected at row {} and column {} of length {}'.format(columns.index(y_list[row_num-1]),rows.index(x_list[row_num-1]), j/min_row))
